// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel EncodeRGB
#pragma kernel EncodeUYVA

Texture2D<float4> Source;
RWStructuredBuffer<uint> ResultBuffer;
float VFlip;

float3 RGB2YUV(float3 rgb)
{
    const float K_B = 0.0722;
    const float K_R = 0.2126;
    const float K_G = 1 - K_B - K_R;

    float y = dot(float3(K_R, K_G, K_B), rgb);
    float u = (rgb.b - y) / (1 - K_B);
    float v = (rgb.r - y) / (1 - K_R);

    return float3(y, u, v);
}

uint PackUYVY(float4 v)
{
    v.yw = v.yw * 219 + 16;  //  Y components (limited range)
    v.xz = v.xz * 112 + 128; // UV components (limited range)
    uint4 i = (uint4)(v + 0.5);
    return i.x | (i.y << 8) | (i.z << 16) | (i.w << 24);
}

uint PackAAAA(float4 a)
{
    uint4 i = (uint4)(a * 255 + 0.5);
    return i.x | (i.y << 8) | (i.z << 16) | (i.w << 24);
}
void EncodeUYVA(uint2 id, float4 s0, float4 s1, float4 s2, float4 s3)
{
    float3 yuv0 = RGB2YUV(s0.xyz);
    float3 yuv1 = RGB2YUV(s1.xyz);
    float3 yuv2 = RGB2YUV(s2.xyz);
    float3 yuv3 = RGB2YUV(s3.xyz);

    float u01 = (yuv0.y + yuv1.y) / 2;
    float v01 = (yuv0.z + yuv1.z) / 2;

    float u23 = (yuv2.y + yuv3.y) / 2;
    float v23 = (yuv2.z + yuv3.z) / 2;

    float4 uyvy01 = float4(u01, yuv0.x, v01, yuv1.x);
    float4 uyvy23 = float4(u23, yuv2.x, v23, yuv3.x);

    uint w, h;
    Source.GetDimensions(w, h);

    uint sy = lerp(id.y, h - 1 - id.y, VFlip);
    uint dp1 = sy * w / 2 + id.x * 2;
    uint dp2 = sy * w / 4 + id.x + w * h / 2;

    ResultBuffer[dp1 + 0] = PackUYVY(uyvy01);
    ResultBuffer[dp1 + 1] = PackUYVY(uyvy23);
    ResultBuffer[dp2] = PackAAAA(float4(s0.w, s1.w, s2.w, s3.w));
}

[numthreads(8,8,1)]
void EncodeRGB(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Source.GetDimensions(width, height);
    uint4 prerbgapack = Source[id.xy] * 255;
    ResultBuffer[id.x + id.y * height] = prerbgapack.a << 24 | prerbgapack.b << 16 | prerbgapack.g << 8 | prerbgapack.r;
}

[numthreads(4, 8, 1)]
void EncodeUYVA(uint2 id : SV_DispatchThreadID)
{
    uint2 sp = id * uint2(4, 1);
    float4 s0 = Source[sp + uint2(0, 0)];
    float4 s1 = Source[sp + uint2(1, 0)];
    float4 s2 = Source[sp + uint2(2, 0)];
    float4 s3 = Source[sp + uint2(3, 0)];
    EncodeUYVA(id, s0, s1, s2, s3);
}